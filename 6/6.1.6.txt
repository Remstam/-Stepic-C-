#include <cstddef>
#include <algorithm>

template <typename T>
class Array
{
    public:
    // Список операций:
    //
    // explicit Array(size_t size = 0, const T& value = T())
    //   конструктор класса, который создает
    //   Array размера size, заполненный значениями
    //   value типа T. Считайте что у типа T есть
    //   конструктор, который можно вызвать без
    //   без параметров, либо он ему не нужен.
    
    explicit Array(size_t size = 0, const T& value = T()) {
        size_ = size;
        data = new T[size_];
        
        for (size_t i = 0; i < size_; ++i) {
            data[i] = value;
        }
    }
    
    // Array(const Array &)
    //   конструктор копирования, который создает
    //   копию параметра. Считайте, что для типа
    //   T определен оператор присваивания.
    
    Array(const Array & arr):size_(arr.size()), data(new T[arr.size()]) {
        for (size_t i = 0; i < size_; ++i) {
            data[i] = arr.data[i];
        }
    }
    
    // ~Array()
    //   деструктор, если он вам необходим.
    
    ~Array() {
        delete[] data;
    }
    
    // Array& operator=(...)
    //   оператор присваивания.
    
    void Swap(Array & arr) {
        std::swap(size_, arr.size_);
        std::swap(data, arr.data);
    }
    
    Array& operator=(Array const & arr) {
        if (this != &arr) {
            Array(arr).Swap(*this);
        }
        
        return *this;
    }
    
    // size_t size() const
    //   возвращает размер массива (количество
    //                              элементов).
    
    size_t size() const {
        return size_;
    }
    
    // T& operator[](size_t)
    // const T& operator[](size_t) const
    //   две версии оператора доступа по индексу.
    
    T& operator[](size_t ind) {
        return data[ind];
    }
    
    const T& operator[](size_t ind) const {
        return data[ind];
    }
    
    private:
        size_t size_;
        T* data;
};