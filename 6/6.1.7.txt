#include <cstddef>

template <typename T>
class Array
{
    public:
    // Список операций:
    //
    // explicit Array(size_t size, const T& value = T())
    //   конструктор класса, который создает
    //   Array размера size, заполненный значениями
    //   value типа T. Если у класса нет конструктора
    //   по умолчанию, то второй аргумент этого конструктора
    //   обязателен.
    
    explicit Array(size_t size, const T& value = T()) {
        fill(size, value);
    }
    
    // Array()
    //   конструктор класса, который можно вызвать
    //   без параметров. Должен создавать пустой
    //   Array.
    
    Array() {
        size_ = 0;
        data = NULL;
    }
    
    // Array(const Array &)
    //   конструктор копирования, который создает
    //   копию параметра. Для типа T оператор
    //   присваивания не определен.
    
    Array(const Array & arr) {
        init(arr);
    }
    
    // ~Array()
    //   деструктор, если он вам необходим.
    
    ~Array() {
        clear();
    }
    
    // Array& operator=(...)
    //   оператор присваивания.
    
    Array& operator=(Array const& arr) {
        if (this != &arr) {
            clear();
            init(arr);
        }
        
        return *this;
    }
    
    // size_t size() const
    //   возвращает размер массива (количество 
    //                              элементов).
    
    size_t size() const {
        return size_;
    }
    
    // T& operator[](size_t)
    // const T& operator[](size_t) const
    //   две версии оператора доступа по индексу.
    
    T& operator[](size_t ind) {
        return data[ind];
    }
    
    const T& operator[](size_t ind) const {
        return data[ind];
    }
    
    private:
        void setup(size_t size) {
            size_ = size;
            data = (T*) new char[size_ * sizeof(T)];
        }
    
        void fill(size_t size, const T& value) {
            setup(size);
            
            for (size_t i = 0; i < size_; ++i) {
                new (data + i) T(value);
            }
        }
    
        void init(const Array & arr) {
            setup(arr.size());
            
            for (size_t i = 0; i < size_; ++i) {
                new (data + i) T(arr.data[i]);
            }
        }
        
        void clear() {
            for (size_t i = 0; i < size_; ++i) {
                data[i].~T();
            }
        
            delete[] (char*) data;
        }
        
        size_t size_;
        T* data;
};