struct Expression;
struct Number;
struct BinaryOperation;

struct SharedPtr
{
    // реализуйте следующие методы
    //
    // explicit SharedPtr(Expression *ptr = 0)
    // ~SharedPtr()
    // SharedPtr(const SharedPtr &)
    // SharedPtr& operator=(const SharedPtr &)
    // Expression* get() const
    // void reset(Expression *ptr = 0)
    // Expression& operator*() const
    // Expression* operator->() const
    
    explicit SharedPtr(Expression *ptr = 0) {
        init(ptr);
    }
    
    ~SharedPtr() {
        clear();
    }
    
    SharedPtr(const SharedPtr & shptr) {
        ptr_ = shptr.ptr_;
        refCounter_ = shptr.refCounter_;
        
        if (ptr_ != 0) {
            ++(*refCounter_);
        }
    }
    
    SharedPtr& operator=(const SharedPtr & shptr) {
        if (this != &shptr) {
            clear();
            if (shptr.ptr_ != 0) {
                ptr_ = shptr.ptr_;
                refCounter_ = shptr.refCounter_;
                ++(*refCounter_);
            }
        }
        
        return *this;
    }
    
    Expression* get() const {
        return ptr_;
    }
    
    void reset(Expression* ptr = 0) {
        clear();
        init(ptr);
    }
    
    Expression& operator*() const {
        return *ptr_;
    }
    
    Expression* operator->() const {
        return ptr_;
    }
    
    public:
        void init(Expression* ptr) {
            ptr_ = ptr;
        
            if (ptr != 0) {
                refCounter_ = new int(1);
            }
        }
        
        void clear() {
            if (ptr_ != 0 && --(*refCounter_) == 0) {
                delete ptr_;
                delete refCounter_;
            }
        }
    
        Expression* ptr_;
        int* refCounter_;
};